#注意: properties文件中的注释信息只能处于行首, 不要跟在行尾
# 设置要输出的日志的级别
# 将info及以上信息输出到stdout和logfile
log4j.rootLogger=INFO,stdout,logfile

### 输出到控制台, Java程序运行时的标准输出信息
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# 输出格式
log4j.appender.stdout.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [%t] [%c] [%p] - %m%n

### 输出到日志文件
# 按天滚动生成, 不支持MaxFileSize, 而RollingFileAppender支持
log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
# 日志输出目录
#log4j.appender.logfile.File=${base.dir}/logs/elastic-server.log
log4j.appender.logfile.File=E:/文档/log/debug.log
log4j.appender.logfile.Append=true
# 输出INFO及以上的日志, 按日期滚动就无须配置单个日志文件的最大体积了
log4j.appender.logfile.Threshold=INFO
#日志信息的格式
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
# %t: 输出产生该日志事件的线程名
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %l: 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行
log4j.appender.logfile.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [%t] [%c] [%p] - %m%n